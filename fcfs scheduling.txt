#include <stdio.h>

struct Process {
    int pid; // Process ID
    int burstTime; // Burst Time
    int waitingTime; // Waiting Time
    int turnaroundTime; // Turnaround Time
};

void calculateWaitingTime(struct Process processes[], int n) {
    processes[0].waitingTime = 0; // First process has 0 waiting time

    // Calculate waiting time for each process
    for (int i = 1; i < n; i++) {
        processes[i].waitingTime = processes[i - 1].waitingTime + processes[i - 1].burstTime;
    }
}

void calculateTurnaroundTime(struct Process processes[], int n) {
    // Calculate turnaround time for each process
    for (int i = 0; i < n; i++) {
        processes[i].turnaroundTime = processes[i].waitingTime + processes[i].burstTime;
    }
}

void printProcesses(struct Process processes[], int n) {
    printf("PID\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].burstTime, processes[i].waitingTime, processes[i].turnaroundTime);
    }
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    // Input burst time for each process
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &processes[i].burstTime);
    }

    calculateWaitingTime(processes, n);
    calculateTurnaroundTime(processes, n);

    printf("First-Come, First-Served Scheduling (FCFS):\n");
    printProcesses(processes, n);

    return 0;
}

output:

Enter the number of processes: 3
Enter burst time for process 1: 5
Enter burst time for process 2: 8
Enter burst time for process 3: 12

First-Come, First-Served Scheduling (FCFS):
PID    Burst Time    Waiting Time    Turnaround Time
1      5             0               5
2      8             5               13
3      12            13              25

